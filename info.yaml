---
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
# Source files must be in ./src and you must list each source file separately
  source_files:
    - wrapper.v
    - abro_state_machine.v
    - binary_to_bcd.v
    - dice_roller.v
    - lfsr.v
    - sequence_detector.v
    - sequence_generator.v
    - shift_register.v
    - traffic_light.v
  top_module:  "jblocklove_cgpt_benchmark_wrapper"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Jason Blocklove"      # Your name
  title:        "ChatGPT-created Benchmarks"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "This project implements 8 different benchmark circuits created 100% with ChatGPT-4."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    This design implements a series of 8 benchmark circuits selectable by 3 bits of the design input, all of which written by ChatGPT-4. A series of prompts for each circuit were created which had ChatGPT design the module itself as well as a Verilog testbench for the design, and the design was considered finalized when there were no errors from simulation or synthesis. As much of the feedback as possible was given by the tools -- [Icarus Verilog](https://github.com/steveicarus/iverilog) for simulation and the Tiny Tapeout OpenLane/yosys toolchain for synthesis.

    As a result of the designs being 100% created by ChatGPT, they all passed their ChatGPT-created testbenches, but several are not functionally correct as the generated testbenches are insufficient or incorrect.

    ### Wrapper Module/Multiplexer

    The top level module for the design is a wrapper module/multiplexer which allows the user to select which benchmark is being used for the output of the design. Using `io_in[7:5]`, the user can select which benchmark will output to the `io_out` pins.

    | `io_in[7:5]`   | Benchmark          |
    |---------------:|:-------------------|
    | `000`          | Shift Register     |
    | `001`          | Sequence Generator |
    | `010`          | Sequence Detector  |
    | `011`          | ABRO               |
    | `100`          | Binary to BCD      |
    | `101`          | LFSR               |
    | `110`          | Traffic Light      |
    | `111`          | Dice Roller        |

    ---
    ### Shift Register

    ##### ChatGPT Prompt

    ```
    I am trying to create a Verilog model for a shift register. It must meet the following specifications:
    	- Inputs:
    		- Clock
    		- Active-low reset
    		- Data (1 bit)
    		- Shift enable
    	- Outputs:
    		- Data (8 bits)

    How would I write a design that meets these specifications?
    ```

    ##### Benchmark I/O Mapping

    | # | Input           | Output             |
    |---|-----------------|--------------------|
    | 0 | `clk`           | Shifted data [0]   |
    | 1 | `rst_n` (async) | Shifted data [1]   |
    | 2 | `data_in`       | Shifted data [2]   |
    | 3 | `shift_enable`  | Shifted data [3]   |
    | 4 | Not used        | Shifted data [4]   |
    | 5 | Not used        | Shifted data [5]   |
    | 6 | Not used        | Shifted data [6]   |
    | 7 | Not used        | Shifted data [7]   |

    ##### Expected Functionality

    The expected functionality of this shift register module is to shift the `data_in` bit in on the right side of the data vector on any rising `clk` edge where `shift_enable` is high.

    ##### Actual Functionality

    The module seems to function as intended.


    ### Sequence Generator

    ##### ChatGPT Prompt


# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project

# A description of what the inputs do
  inputs:
    - clock
    - reset
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot

# The following fields are optional
  tag:          ""      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
